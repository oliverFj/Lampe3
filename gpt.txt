I need you to create a visualization in this style. It recieves gyroscope data from a mobile phone device and draws
a p5.js sketch using the data and a selected color. I want to create an interesting artwork using math. Can you make
me a visualization that will draw semitransparent lines based on the gyroscope, and a stabilization techique that 
will translate it into an epicycloid?

// threeCircles.js
import Visualization from '../visualization.js';
import Gyroscope from '../gyroscope.js';

export default class ThreeCircles extends Visualization {
    constructor(p, dataManager) {
        super(p, dataManager);
        // Initialize previous sizes to some starting values
        this.prevRedSize = 50;
        this.prevGreenSize = 50;
        this.prevBlueSize = 50;

        // Initialize white circle sizes
        this.whiteRedSize = 60;
        this.whiteGreenSize = 60;
        this.whiteBlueSize = 60;

        // Initialize background color to a darker color
        this.bgColor = [30, 30, 30]; // Dark gray background
    }

    setup() {
        this.p.createCanvas(800, 600);
        this.p.frameRate(60); // Ensure the frame rate is sufficient for smooth transitions
    }

    draw() {
        // Set the background color
        this.p.background(this.bgColor);

        this.p.noStroke();

        // Calculate target sizes based on data
        const targetRedSize = this.p.map(this.dataManager.colorCount.red, 0, 1, 50, 250);
        const targetGreenSize = this.p.map(this.dataManager.colorCount.green, 0, 1, 50, 250);
        const targetBlueSize = this.p.map(this.dataManager.colorCount.blue, 0, 1, 50, 250);

        // Interpolate from previous sizes to target sizes
        const redSize = this.p.lerp(this.prevRedSize, targetRedSize, 0.1);
        const greenSize = this.p.lerp(this.prevGreenSize, targetGreenSize, 0.1);
        const blueSize = this.p.lerp(this.prevBlueSize, targetBlueSize, 0.1);

        // Update previous sizes for the next draw call
        this.prevRedSize = redSize;
        this.prevGreenSize = greenSize;
        this.prevBlueSize = blueSize;

        // Circle positions
        const offsetX = 250;

        // Draw colored circles
        this.p.fill(255, 0, 0);
        this.p.ellipse(this.p.width / 2 - offsetX, this.p.height / 2, redSize, redSize);
        this.p.fill(0, 255, 0);
        this.p.ellipse(this.p.width / 2, this.p.height / 2, greenSize, greenSize);
        this.p.fill(0, 0, 255);
        this.p.ellipse(this.p.width / 2 + offsetX, this.p.height / 2, blueSize, blueSize);

        // Draw white circles around the colored circles with stroke and no fill
        this.p.noFill();
        this.p.stroke(255);
        this.p.strokeWeight(5); // Adjust the stroke weight as needed
        this.p.ellipse(this.p.width / 2 - offsetX, this.p.height / 2, this.whiteRedSize, this.whiteRedSize);
        this.p.ellipse(this.p.width / 2, this.p.height / 2, this.whiteGreenSize, this.whiteGreenSize);
        this.p.ellipse(this.p.width / 2 + offsetX, this.p.height / 2, this.whiteBlueSize, this.whiteBlueSize);

        // Check if any colored circle matches the size of its white circle
        if (Math.abs(redSize - this.whiteRedSize) < 1) {
            this.changeBackgroundColor(155, 0, 0); // Darker red background
        } else if (Math.abs(greenSize - this.whiteGreenSize) < 1) {
            this.changeBackgroundColor(0, 155, 0); // Darker green background
        } else if (Math.abs(blueSize - this.whiteBlueSize) < 1) {
            this.changeBackgroundColor(0, 0, 155); // Darker blue background
        }
    }

    changeBackgroundColor(r, g, b) {
        this.bgColor = [r, g, b];
        // Generate new sizes for white circles
        this.whiteRedSize = this.p.random(60, 260);
        this.whiteGreenSize = this.p.random(60, 260);
        this.whiteBlueSize = this.p.random(60, 260);
    }
}

//colorWaveVisualization.js
import Visualization from '../visualization.js';
import Gyroscope from '../gyroscope.js';

export default class ColorWaveVisualization extends Visualization {
    constructor(p, dataManager) {
        super(p, dataManager);
        this.waves = [];
        this.lastColor = {};
    }

    draw() {
        this.p.clear();
        this.processGyroscopeData();
        this.updateWaves();
        this.displayWaves();
        this.displayText();
    }

    processGyroscopeData() {
        const deviceData = this.dataManager.getDeviceData();
        deviceData.forEach(device => {
            const betaMapped = this.p.map(Gyroscope.normalizeData('beta', device.beta), 0, 1, this.p.height, 0);
            const gammaMapped = this.p.map(Gyroscope.normalizeData('gamma', device.gamma), 0, 1, 0, this.p.width);
            const alphaMapped = this.p.map(Gyroscope.normalizeData('alpha', device.alpha), 0, 1, 10, 100);
            const deviceColor = this.getColorForDevice(device.color);
    
            this.waves.push(new Wave(this.p, gammaMapped, betaMapped, deviceColor, alphaMapped));
        });
    }

    getColorForDevice(colorName) {
        switch(colorName) {
            case 'red':
                return this.p.color(255, 0, 0);
            case 'green':
                return this.p.color(0, 255, 0);
            case 'blue':
                return this.p.color(0, 0, 255);
            default:
                return this.p.color(200); // Default to gray if unknown
        }
    }

    updateWaves() {
        this.waves.forEach(wave => wave.update());
        this.waves = this.waves.filter(wave => wave.isActive());
    }

    displayWaves() {
        this.waves.forEach(wave => {
            this.p.fill(wave.color);
            this.p.circle(wave.x, wave.y, wave.size);
            wave.color.setAlpha(255 - this.p.map(wave.size, 0, this.p.width / 2, 0, 255) * 2); // Faster fading effect
        });
    }

    displayText() {
        this.p.fill(255);
        this.p.textSize(16);
        this.p.text(`Active waves: ${this.waves.length}`, 20, 30);
    }
}

class Wave {
    constructor(p, x, y, color, size) {
        this.p = p;
        this.x = x;
        this.y = y;
        this.size = size;
        this.color = color;
        this.growthRate = this.p.random(1, 5);
    }

    isActive() {
        return this.size < this.p.width / 2;
    }

    update() {
        this.size += this.growthRate;
    }

    updateColor(newColor) {
        this.color = newColor;
    }
}



// gyroscope.js

/**
 * Gyroscope utility class for handling and normalizing gyroscope data.
 * Provides methods to process, filter, and analyze gyroscope inputs for various applications.
 */
export default class Gyroscope {
    /**
     * Normalizes gyroscope data based on type.
     * @param {string} type - The type of gyroscope data ('beta', 'gamma', 'alpha').
     * @param {number} value - The raw sensor value.
     * @returns {number} Normalized value between 0 and 1.
     */
    static normalizeData(type, value) {
        switch (type) {
            case 'beta':
            case 'gamma':
                let capped = Math.min(Math.max(value, -90), 90);
                return (capped + 90) / 180;
            case 'alpha':
                return value / 360;
            default:
                console.error("Invalid type for normalization");
                return 0;  // Return 0 for unknown types as a fallback.
        }
    }

    /**
     * Calculates weight based on the normalized beta value.
     * @param {number} beta - The beta value from gyroscope data.
     * @returns {number} Weight based on beta, normalized between 0 and 1.
     */
    static calculateWeight(beta) {
        let cappedBeta = Math.min(Math.max(beta, -90), 90);
        let normalizedBeta = this.normalizeData('beta', beta);
        console.log(`Calculated weight for beta ${beta}: ${normalizedBeta}`);
        return normalizedBeta;
    }

    /**
     * Calculates vectors for gyroscope data including beta, gamma, and alpha.
     * @param {number} beta 
     * @param {number} gamma 
     * @param {number} alpha 
     * @returns {object} Object containing normalized vectors for beta, gamma, and alpha.
     */
    static calculateVector(beta, gamma, alpha) {
        const betaNorm = this.normalizeData('beta', beta);
        const gammaNorm = this.normalizeData('gamma', gamma);
        const alphaNorm = this.normalizeData('alpha', alpha);
        return { beta: betaNorm, gamma: gammaNorm, alpha: alphaNorm };
    }

    /**
     * Applies dynamic thresholding to determine if a value exceeds a dynamic threshold.
     * @param {number} value - The value to be tested.
     * @param {number} threshold - Base threshold for detection.
     * @param {number} sensitivity - Multiplier to adjust the threshold dynamically.
     * @returns {boolean} True if value exceeds the dynamically adjusted threshold, otherwise false.
     */
    static applyDynamicThresholding(value, threshold, sensitivity) {
        const dynamicThreshold = threshold * sensitivity;
        return Math.abs(value) > dynamicThreshold;
    }

    /**
     * Filters gyroscope data using a low-pass filter.
     * @param {number} value - The value to be filtered.
     * @param {string} filterType - Type of filter to apply ('low-pass' supported).
     * @param {number} factor - Smoothing factor, lower values mean more smoothing.
     * @returns {number} Smoothed value.
     */
    static filterData(value, filterType = 'low-pass', factor = 0.1) {
        if (filterType === 'low-pass') {
            this.prevValue = this.prevValue || value; // Initialize if not already done
            const filteredValue = this.prevValue * (1 - factor) + value * factor;
            this.prevValue = filteredValue;
            return filteredValue;
        }
        throw new Error(`Unsupported filter type: ${filterType}`);
    }

    /**
     * Detects a specific motion pattern in an array of gyroscope data.
     * @param {array} dataArray - Array of gyroscope data values.
     * @param {any} pattern - The pattern to be detected.
     * @returns {boolean} True if the pattern is detected, otherwise false.
     */
    static detectMotionPattern(dataArray, pattern) {
        // Simple heuristic to match a pattern in gyroscope data
        // Implementation to be defined based on specific pattern requirements
        return dataArray.some(data => data === pattern);
    }

    /**
     * Corrects orientation data based on a reference orientation to handle device tilts.
     * @param {object} data - Current orientation data.
     * @param {object} referenceOrientation - Reference orientation for correction.
     * @returns {object} Corrected orientation data.
     */
    static correctOrientation(data, referenceOrientation) {
        // Corrects data based on a reference orientation
        // Placeholder for demonstration; implementation details would depend on specific needs
        return {
            beta: data.beta - referenceOrientation.beta,
            gamma: data.gamma - referenceOrientation.gamma,
            alpha: data.alpha - referenceOrientation.alpha
        };
    }
}
